name: CI Test Workflow

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      MONGO_URI: mongodb://localhost:27017/streaming_selector
      REACT_APP_API_URL: http://localhost:3000/api

    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'  # Updated to Node.js 20

      # 3. Wait for MongoDB to be ready
      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            nc -z localhost 27017 && echo "MongoDB is up" && break
            echo "Waiting for MongoDB..."
            sleep 1
          done

      # 4. Install dependencies
      - name: Install dependencies
        run: npm run install-all

      # 5. Create the .env file for the server
      - name: Create Server .env file
        run: |
          cp server/.env.example server/.env
          echo "MONGO_URI=${{ env.MONGO_URI }}" >> server/.env

      # 6. Create the .env file for the client (if needed)
      - name: Create Client .env file
        run: |
          cp client/.env.example client/.env
          echo "REACT_APP_API_URL=${{ env.REACT_APP_API_URL }}" >> client/.env

      # 7. Seed MongoDB with your seed data
      - name: Seed MongoDB
        run: |
          mongoimport --db streaming_selector_db --collection movies --file data/streaming_selector.movies.json --jsonArray
          mongoimport --db streaming_selector_db --collection questions --file data/streaming_selector.questions.json --jsonArray

      # 8. Start development servers in the background
      - name: Start Development Servers
        run: npm run dev &

      # 9. Wait for servers to start
      - name: Wait for Servers
        run: sleep 15

      # 10. (Optional) Run tests if available
      - name: Run Tests
        run: npm test

      # 11. (Optional) Check MongoDB Logs on Failure
      - name: Check MongoDB Logs on Failure
        if: failure()
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=mongo:6.0")
          if [ -n "$CONTAINER_ID" ]; then
            docker logs "$CONTAINER_ID"
          else
            echo "No MongoDB container found to fetch logs."
          fi
